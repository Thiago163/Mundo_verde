{"ast":null,"code":"import PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar pixelRatio = PixelRatio.get();\nvar deviceHeight = Dimensions.get('window').height;\nvar deviceWidth = Dimensions.get('window').width;\nvar normalize = function normalize(size) {\n  if (pixelRatio >= 2 && pixelRatio < 3) {\n    if (deviceWidth < 360) {\n      return size * 0.95;\n    }\n    if (deviceHeight < 667) {\n      return size;\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.15;\n    }\n    return size * 1.25;\n  }\n  if (pixelRatio >= 3 && pixelRatio < 3.5) {\n    if (deviceWidth <= 360) {\n      return size;\n    }\n    if (deviceHeight < 667) {\n      return size * 1.15;\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.2;\n    }\n    return size * 1.27;\n  }\n  if (pixelRatio >= 3.5) {\n    if (deviceWidth <= 360) {\n      return size;\n    }\n    if (deviceHeight < 667) {\n      return size * 1.2;\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.25;\n    }\n    return size * 1.4;\n  }\n  return size;\n};\nexport default normalize;","map":{"version":3,"names":["pixelRatio","PixelRatio","get","deviceHeight","Dimensions","height","deviceWidth","width","normalize","size"],"sources":["D:/home/aluno/Desktop/App_Cuidadores/node_modules/react-native-elements/src/helpers/normalizeText.js"],"sourcesContent":["//\n// Method to normalize size of fonts across devices\n//\n// Some code taken from https://jsfiddle.net/97ty7yjk/ &\n// https://stackoverflow.com/questions/34837342/font-size-on-iphone-6s-plus\n//\n// author: @xiaoneng\n// date: 14/10/2016\n// version: 03\n//\n\nimport { PixelRatio, Dimensions } from 'react-native';\n\nconst pixelRatio = PixelRatio.get();\nconst deviceHeight = Dimensions.get('window').height;\nconst deviceWidth = Dimensions.get('window').width;\n\n// -- Testing Only --\n// const fontScale = PixelRatio.getFontScale();\n// const layoutSize = PixelRatio.getPixelSizeForLayoutSize(14);\n// console.log('normalizeText getPR ->', pixelRatio);\n// console.log('normalizeText getFS ->', fontScale);\n// console.log('normalizeText getDH ->', deviceHeight);\n// console.log('normalizeText getDW ->', deviceWidth);\n// console.log('normalizeText getPSFLS ->', layoutSize);\n\nconst normalize = (size) => {\n  if (pixelRatio >= 2 && pixelRatio < 3) {\n    // iphone 5s and older Androids\n    if (deviceWidth < 360) {\n      return size * 0.95;\n    }\n\n    // iphone 5\n    if (deviceHeight < 667) {\n      return size;\n      // iphone 6-6s\n    }\n\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.15;\n    }\n    // older phablets\n    return size * 1.25;\n  }\n\n  if (pixelRatio >= 3 && pixelRatio < 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n      return size;\n    }\n\n    // Catch other weird android width sizings\n    if (deviceHeight < 667) {\n      return size * 1.15;\n      // catch in-between size Androids and scale font up\n      // a tad but not too much\n    }\n\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.2;\n    }\n\n    // catch larger devices\n    // ie iphone 6s plus / 7 plus / mi note 等等\n    return size * 1.27;\n  }\n\n  if (pixelRatio >= 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n      return size;\n      // Catch other smaller android height sizings\n    }\n\n    if (deviceHeight < 667) {\n      return size * 1.2;\n      // catch in-between size Androids and scale font up\n      // a tad but not too much\n    }\n\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.25;\n    }\n\n    // catch larger phablet devices\n    return size * 1.4;\n  }\n\n  return size;\n};\n\nexport default normalize;\n"],"mappings":";;AAaA,IAAMA,UAAU,GAAGC,UAAU,CAACC,GAAG,EAAE;AACnC,IAAMC,YAAY,GAAGC,UAAU,CAACF,GAAG,CAAC,QAAQ,CAAC,CAACG,MAAM;AACpD,IAAMC,WAAW,GAAGF,UAAU,CAACF,GAAG,CAAC,QAAQ,CAAC,CAACK,KAAK;AAWlD,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,IAAI,EAAK;EAC1B,IAAIT,UAAU,IAAI,CAAC,IAAIA,UAAU,GAAG,CAAC,EAAE;IAErC,IAAIM,WAAW,GAAG,GAAG,EAAE;MACrB,OAAOG,IAAI,GAAG,IAAI;IACpB;IAGA,IAAIN,YAAY,GAAG,GAAG,EAAE;MACtB,OAAOM,IAAI;IAEb;IAEA,IAAIN,YAAY,IAAI,GAAG,IAAIA,YAAY,IAAI,GAAG,EAAE;MAC9C,OAAOM,IAAI,GAAG,IAAI;IACpB;IAEA,OAAOA,IAAI,GAAG,IAAI;EACpB;EAEA,IAAIT,UAAU,IAAI,CAAC,IAAIA,UAAU,GAAG,GAAG,EAAE;IAGvC,IAAIM,WAAW,IAAI,GAAG,EAAE;MACtB,OAAOG,IAAI;IACb;IAGA,IAAIN,YAAY,GAAG,GAAG,EAAE;MACtB,OAAOM,IAAI,GAAG,IAAI;IAGpB;IAEA,IAAIN,YAAY,IAAI,GAAG,IAAIA,YAAY,IAAI,GAAG,EAAE;MAC9C,OAAOM,IAAI,GAAG,GAAG;IACnB;IAIA,OAAOA,IAAI,GAAG,IAAI;EACpB;EAEA,IAAIT,UAAU,IAAI,GAAG,EAAE;IAGrB,IAAIM,WAAW,IAAI,GAAG,EAAE;MACtB,OAAOG,IAAI;IAEb;IAEA,IAAIN,YAAY,GAAG,GAAG,EAAE;MACtB,OAAOM,IAAI,GAAG,GAAG;IAGnB;IAEA,IAAIN,YAAY,IAAI,GAAG,IAAIA,YAAY,IAAI,GAAG,EAAE;MAC9C,OAAOM,IAAI,GAAG,IAAI;IACpB;IAGA,OAAOA,IAAI,GAAG,GAAG;EACnB;EAEA,OAAOA,IAAI;AACb,CAAC;AAED,eAAeD,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}