{"ast":null,"code":"import findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from \"./PlatformChecker\";\nexport function getTag(view) {\n  return findNodeHandle(view);\n}\nvar isNative = !shouldBeUseWeb();\nexport var measure;\nif (isWeb()) {\n  measure = function measure(animatedRef) {\n    var element = animatedRef();\n    var viewportOffset = element.getBoundingClientRect();\n    return {\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n      x: element.offsetLeft,\n      y: element.offsetTop,\n      pageX: viewportOffset.left,\n      pageY: viewportOffset.top\n    };\n  };\n} else if (isChromeDebugger()) {\n  measure = function measure(_animatedRef) {\n    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n    return null;\n  };\n} else {\n  measure = function measure(animatedRef) {\n    'worklet';\n\n    if (!_WORKLET) {\n      console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' + 'only available in the UI runtime. This may also happen if measure() ' + 'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' + 'calls the given worklet on the JS runtime during render. If you want to ' + 'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' + 'only be called on the UI runtime after the render has been completed.');\n      return null;\n    }\n    var viewTag = animatedRef();\n    if (viewTag === -1) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    }\n    var measured = _measure(viewTag);\n    if (measured === null) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" has some undefined, not-yet-computed or meaningless value of `LayoutMetrics` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).\");\n      return null;\n    } else if (measured.x === -1234567) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" returned an invalid measurement response.\");\n      return null;\n    } else if (isNaN(measured.x)) {\n      console.warn(\"[Reanimated] The view with tag \" + viewTag + \" gets view-flattened on Android. To disable view-flattening, set `collapsable={false}` on this component.\");\n      return null;\n    } else {\n      return measured;\n    }\n  };\n}\nexport var scrollTo;\nif (isWeb()) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    var element = animatedRef();\n    element.scrollTo({\n      x: x,\n      y: y,\n      animated: animated\n    });\n  };\n} else if (isNative) {\n  scrollTo = function scrollTo(animatedRef, x, y, animated) {\n    'worklet';\n\n    if (!_WORKLET) {\n      return;\n    }\n    var viewTag = animatedRef();\n    _scrollTo(viewTag, x, y, animated);\n  };\n} else {\n  scrollTo = function scrollTo(_animatedRef, _x, _y) {};\n}\nexport function setGestureState(handlerTag, newState) {\n  'worklet';\n\n  if (!_WORKLET || !isNative) {\n    console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n    return;\n  }\n  _setGestureState(handlerTag, newState);\n}","map":{"version":3,"names":["isChromeDebugger","isWeb","shouldBeUseWeb","getTag","view","findNodeHandle","isNative","measure","animatedRef","element","viewportOffset","getBoundingClientRect","width","offsetWidth","height","offsetHeight","x","offsetLeft","y","offsetTop","pageX","left","pageY","top","_animatedRef","console","warn","_WORKLET","viewTag","measured","_measure","isNaN","scrollTo","animated","_scrollTo","_x","_y","setGestureState","handlerTag","newState","_setGestureState"],"sources":["D:/home/aluno/Desktop/App_Cuidadores12/node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"],"sourcesContent":["import { findNodeHandle } from 'react-native';\nimport { isChromeDebugger, isWeb, shouldBeUseWeb } from './PlatformChecker';\nexport function getTag(view) {\n    return findNodeHandle(view);\n}\nconst isNative = !shouldBeUseWeb();\nexport let measure;\nif (isWeb()) {\n    measure = (animatedRef) => {\n        const element = animatedRef(); // TODO: fix typing of animated refs on web\n        const viewportOffset = element.getBoundingClientRect();\n        return {\n            width: element.offsetWidth,\n            height: element.offsetHeight,\n            x: element.offsetLeft,\n            y: element.offsetTop,\n            pageX: viewportOffset.left,\n            pageY: viewportOffset.top,\n        };\n    };\n}\nelse if (isChromeDebugger()) {\n    measure = (_animatedRef) => {\n        console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');\n        return null;\n    };\n}\nelse {\n    measure = (animatedRef) => {\n        'worklet';\n        if (!_WORKLET) {\n            console.warn('[Reanimated] measure() was called from the main JS context. Measure is ' +\n                'only available in the UI runtime. This may also happen if measure() ' +\n                'was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle ' +\n                'calls the given worklet on the JS runtime during render. If you want to ' +\n                'prevent this warning then wrap the call with `if (_WORKLET)`. Then it will ' +\n                'only be called on the UI runtime after the render has been completed.');\n            return null;\n        }\n        const viewTag = animatedRef();\n        if (viewTag === -1) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        const measured = _measure(viewTag);\n        if (measured === null) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \\`LayoutMetrics\\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);\n            return null;\n        }\n        else if (measured.x === -1234567) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);\n            return null;\n        }\n        else if (isNaN(measured.x)) {\n            console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \\`collapsable={false}\\` on this component.`);\n            return null;\n        }\n        else {\n            return measured;\n        }\n    };\n}\nexport let scrollTo;\nif (isWeb()) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        const element = animatedRef();\n        // @ts-ignore same call as in react-native-web\n        element.scrollTo({ x, y, animated });\n    };\n}\nelse if (isNative) {\n    scrollTo = (animatedRef, x, y, animated) => {\n        'worklet';\n        if (!_WORKLET) {\n            return;\n        }\n        const viewTag = animatedRef();\n        _scrollTo(viewTag, x, y, animated);\n    };\n}\nelse {\n    scrollTo = (_animatedRef, _x, _y) => {\n        // no-op\n    };\n}\nexport function setGestureState(handlerTag, newState) {\n    'worklet';\n    if (!_WORKLET || !isNative) {\n        console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');\n        return;\n    }\n    _setGestureState(handlerTag, newState);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}