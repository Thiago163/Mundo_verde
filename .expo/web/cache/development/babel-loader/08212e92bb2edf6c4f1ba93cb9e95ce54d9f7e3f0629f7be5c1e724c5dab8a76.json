{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useFocusedListenersChildrenAdapter(_ref) {\n  var navigation = _ref.navigation,\n    focusedListeners = _ref.focusedListeners;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    addListener = _React$useContext.addListener;\n  var listener = React.useCallback(function (callback) {\n    if (navigation.isFocused()) {\n      for (var _listener of focusedListeners) {\n        var _listener2 = _listener(callback),\n          handled = _listener2.handled,\n          result = _listener2.result;\n        if (handled) {\n          return {\n            handled: handled,\n            result: result\n          };\n        }\n      }\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(function () {\n    return addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener);\n  }, [addListener, listener]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","useFocusedListenersChildrenAdapter","_ref","navigation","focusedListeners","_React$useContext","useContext","addListener","listener","useCallback","callback","isFocused","_listener2","handled","result","useEffect"],"sources":["C:\\Users\\luizf\\Desktop\\App_Cuidadores11\\node_modules\\@react-navigation\\core\\lib\\module\\useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addListener?.('focus', listener), [\n    addListener,\n    listener,\n  ]);\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,wBAAP;AAcA,eAAe,SAASC,kCAATA,CAAAC,IAAA,EAGH;EAAA,IAFVC,UADyD,GAAAD,IAAA,CACzDC,UADyD;IAEzDC,gBAAA,GAAAF,IAAA,CAAAE,gBAAA;EAEA,IAAAC,iBAAA,GAAwBN,KAAK,CAACO,UAAN,CAAiBN,wBAAjB,CAAxB;IAAQO,WAAA,GAAAF,iBAAA,CAAAE,WAAA;EAER,IAAMC,QAAQ,GAAGT,KAAK,CAACU,WAAN,CACd,UAAAC,QAAD,EAA8C;IAC5C,IAAIP,UAAU,CAACQ,SAAX,EAAJ,EAA4B;MAC1B,KAAK,IAAMH,SAAX,IAAuBJ,gBAAvB,EAAyC;QACvC,IAAAQ,UAAA,GAA4BJ,SAAQ,CAACE,QAAD,CAApC;UAAQG,OAAF,GAAAD,UAAA,CAAEC,OAAF;UAAWC,MAAA,GAAAF,UAAA,CAAAE,MAAA;QAEjB,IAAID,OAAJ,EAAa;UACX,OAAO;YAAEA,OAAF,EAAEA,OAAF;YAAWC,MAAA,EAAAA;UAAX,CAAP;QACD;MACF;MAED,OAAO;QAAED,OAAO,EAAE,IAAX;QAAiBC,MAAM,EAAEJ,QAAQ,CAACP,UAAD;MAAjC,CAAP;IACD,CAVD,MAUO;MACL,OAAO;QAAEU,OAAO,EAAE,KAAX;QAAkBC,MAAM,EAAE;MAA1B,CAAP;IACD;EACF,CAfc,EAgBf,CAACV,gBAAD,EAAmBD,UAAnB,CAhBe,CAAjB;EAmBAJ,KAAK,CAACgB,SAAN,CAAgB;IAAA,OAAMR,WAAN,aAAMA,WAAN,uBAAMA,WAAW,CAAG,OAAH,EAAYC,QAAZ,CAAjC;EAAA,GAAwD,CACtDD,WADsD,EAEtDC,QAFsD,CAAxD;AAID"},"metadata":{},"sourceType":"module","externalDependencies":[]}