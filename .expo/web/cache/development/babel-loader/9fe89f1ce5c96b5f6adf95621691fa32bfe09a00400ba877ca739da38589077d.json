{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"thumbProps\", \"debugTouchArea\", \"orientation\"],\n  _excluded2 = [\"Component\", \"isVisible\", \"onLayout\", \"style\", \"start\", \"color\", \"vertical\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { withTheme } from \"../config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar TRACK_STYLE = Platform.select({\n  web: 0,\n  default: -1\n});\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\nvar getBoundedValue = function getBoundedValue(value, maximumValue, minimumValue) {\n  return Math.max(Math.min(value, maximumValue), minimumValue);\n};\nvar Rect = function () {\n  function Rect(x, y, width, height) {\n    _classCallCheck(this, Rect);\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  _createClass(Rect, [{\n    key: \"containsPoint\",\n    value: function containsPoint(x, y) {\n      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n    }\n  }]);\n  return Rect;\n}();\nvar Slider = function (_React$Component) {\n  _inherits(Slider, _React$Component);\n  var _super = _createSuper(Slider);\n  function Slider(props) {\n    var _this;\n    _classCallCheck(this, Slider);\n    _this = _super.call(this, props);\n    _this.measureContainer = function (x) {\n      _this.handleMeasure('containerSize', x);\n    };\n    _this.measureTrack = function (x) {\n      _this.handleMeasure('trackSize', x);\n    };\n    _this.measureThumb = function (x) {\n      _this.handleMeasure('thumbSize', x);\n    };\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(getBoundedValue(props.value, props.maximumValue, props.minimumValue))\n    };\n    _this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: _this.handleStartShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onMoveShouldSetPanResponder: _this.handleMoveShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onPanResponderGrant: _this.handlePanResponderGrant.bind(_assertThisInitialized(_this)),\n      onPanResponderMove: _this.handlePanResponderMove.bind(_assertThisInitialized(_this)),\n      onPanResponderRelease: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminationRequest: _this.handlePanResponderRequestEnd.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminate: _this.handlePanResponderEnd.bind(_assertThisInitialized(_this))\n    });\n    _this.isVertical = props.orientation === 'vertical';\n    return _this;\n  }\n  _createClass(Slider, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var newValue = getBoundedValue(this.props.value, this.props.maximumValue, this.props.minimumValue);\n      if (prevProps.value !== newValue) {\n        if (this.props.animateTransitions) {\n          this.setCurrentValueAnimated(newValue);\n        } else {\n          this.setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"setCurrentValue\",\n    value: function setCurrentValue(value) {\n      this.state.value.setValue(value);\n    }\n  }, {\n    key: \"setCurrentValueAnimated\",\n    value: function setCurrentValueAnimated(value) {\n      var animationType = this.props.animationType;\n      var animationConfig = Object.assign({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n        toValue: value\n      });\n      Animated[animationType](this.state.value, animationConfig).start();\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderGrant\",\n    value: function handlePanResponderGrant() {\n      this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n      this.fireChangeEvent('onSlidingStart');\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onValueChange');\n    }\n  }, {\n    key: \"handlePanResponderRequestEnd\",\n    value: function handlePanResponderRequestEnd() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onSlidingComplete');\n    }\n  }, {\n    key: \"thumbHitTest\",\n    value: function thumbHitTest(_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      var thumbTouchRect = this.getThumbTouchRect();\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e) {\n      if (!this.props.allowTouchTrack) {\n        return this.thumbHitTest(e);\n      }\n      this.setCurrentValue(this.getOnTouchValue(e));\n      this.fireChangeEvent('onValueChange');\n      return true;\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](this.getCurrentValue());\n      }\n    }\n  }, {\n    key: \"getOnTouchValue\",\n    value: function getOnTouchValue(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      var location = this.isVertical ? nativeEvent.locationY : nativeEvent.locationX;\n      return this.getValueForTouch(location);\n    }\n  }, {\n    key: \"getValueForTouch\",\n    value: function getValueForTouch(location) {\n      var length = this.state.containerSize.width - this.state.thumbSize.width;\n      var ratio = location / length;\n      var newValue = ratio * (this.props.maximumValue - this.props.minimumValue);\n      if (this.props.step) {\n        newValue = Math.round(newValue / this.props.step) * this.props.step;\n      }\n      return getBoundedValue(newValue + this.props.minimumValue, this.props.maximumValue, this.props.minimumValue);\n    }\n  }, {\n    key: \"getTouchOverflowSize\",\n    value: function getTouchOverflowSize() {\n      var _this$state = this.state,\n        thumbSize = _this$state.thumbSize,\n        allMeasured = _this$state.allMeasured,\n        containerSize = _this$state.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var size = {};\n      if (allMeasured === true) {\n        size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n        size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n      }\n      return size;\n    }\n  }, {\n    key: \"getTouchOverflowStyle\",\n    value: function getTouchOverflowStyle() {\n      var _this$getTouchOverflo = this.getTouchOverflowSize(),\n        width = _this$getTouchOverflo.width,\n        height = _this$getTouchOverflo.height;\n      var touchOverflowStyle = {};\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n      if (this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n      return touchOverflowStyle;\n    }\n  }, {\n    key: \"handleMeasure\",\n    value: function handleMeasure(name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n        layoutWidth = _x$nativeEvent$layout.width,\n        layoutHeight = _x$nativeEvent$layout.height;\n      var width = this.isVertical ? layoutHeight : layoutWidth;\n      var height = this.isVertical ? layoutWidth : layoutHeight;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = this[storeName];\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n      this[storeName] = size;\n      if (this._containerSize && this._trackSize && this._thumbSize) {\n        this.setState({\n          containerSize: this._containerSize,\n          trackSize: this._trackSize,\n          thumbSize: this._thumbSize,\n          allMeasured: true\n        });\n      }\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(gestureState) {\n      var location = this._previousLeft + (this.isVertical ? gestureState.dy : gestureState.dx);\n      return this.getValueForTouch(location);\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.state.value.__getValue();\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(value) {\n      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    }\n  }, {\n    key: \"getThumbLeft\",\n    value: function getThumbLeft(value) {\n      var ratio = this.getRatio(value);\n      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n    }\n  }, {\n    key: \"getThumbTouchRect\",\n    value: function getThumbTouchRect() {\n      var _this$state2 = this.state,\n        thumbSize = _this$state2.thumbSize,\n        containerSize = _this$state2.containerSize;\n      var thumbTouchSize = this.props.thumbTouchSize;\n      var touchOverflowSize = this.getTouchOverflowSize();\n      var height = touchOverflowSize.height / 2 + (containerSize.height - thumbTouchSize.height) / 2;\n      var width = touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (thumbSize.width - thumbTouchSize.width) / 2;\n      if (this.isVertical) {\n        return new Rect(height, width, thumbTouchSize.width, thumbTouchSize.height);\n      }\n      return new Rect(width, height, thumbTouchSize.width, thumbTouchSize.height);\n    }\n  }, {\n    key: \"renderDebugThumbTouchRect\",\n    value: function renderDebugThumbTouchRect(thumbLeft) {\n      var thumbTouchRect = this.getThumbTouchRect();\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return _jsx(Animated.View, {\n        style: positionStyle,\n        pointerEvents: \"none\"\n      });\n    }\n  }, {\n    key: \"getMinimumTrackStyles\",\n    value: function getMinimumTrackStyles(thumbStart) {\n      var _this$state3 = this.state,\n        thumbSize = _this$state3.thumbSize,\n        trackSize = _this$state3.trackSize;\n      var minimumTrackStyle = {\n        position: 'absolute'\n      };\n      if (this.isVertical) {\n        minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n        minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;\n      } else {\n        minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n        minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;\n      }\n      return minimumTrackStyle;\n    }\n  }, {\n    key: \"getThumbPositionStyles\",\n    value: function getThumbPositionStyles(thumbStart) {\n      return [_defineProperty({}, this.isVertical ? 'translateY' : 'translateX', thumbStart)];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        minimumValue = _this$props.minimumValue,\n        maximumValue = _this$props.maximumValue,\n        minimumTrackTintColor = _this$props.minimumTrackTintColor,\n        maximumTrackTintColor = _this$props.maximumTrackTintColor,\n        thumbTintColor = _this$props.thumbTintColor,\n        containerStyle = _this$props.containerStyle,\n        style = _this$props.style,\n        trackStyle = _this$props.trackStyle,\n        thumbStyle = _this$props.thumbStyle,\n        thumbProps = _this$props.thumbProps,\n        debugTouchArea = _this$props.debugTouchArea,\n        orientation = _this$props.orientation,\n        other = _objectWithoutProperties(_this$props, _excluded);\n      var _this$state4 = this.state,\n        value = _this$state4.value,\n        containerSize = _this$state4.containerSize,\n        thumbSize = _this$state4.thumbSize,\n        allMeasured = _this$state4.allMeasured;\n      var mainStyles = containerStyle || styles;\n      var appliedTrackStyle = StyleSheet.flatten([styles.track, trackStyle]);\n      var thumbStart = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n      if (!allMeasured) {\n        valueVisibleStyle.height = 0;\n        valueVisibleStyle.width = 0;\n      }\n      var minimumTrackStyle = _objectSpread(_objectSpread({}, this.getMinimumTrackStyles(thumbStart)), {}, {\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n      var touchOverflowStyle = this.getTouchOverflowStyle();\n      return _jsxs(View, _objectSpread(_objectSpread({}, other), {}, {\n        style: StyleSheet.flatten([this.isVertical ? mainStyles.containerVertical : mainStyles.containerHorizontal, style]),\n        onLayout: this.measureContainer,\n        children: [_jsx(View, {\n          style: StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, {\n            backgroundColor: maximumTrackTintColor\n          }]),\n          onLayout: this.measureTrack\n        }), _jsx(Animated.View, {\n          style: StyleSheet.flatten([mainStyles.track, this.isVertical ? mainStyles.trackVertical : mainStyles.trackHorizontal, appliedTrackStyle, minimumTrackStyle])\n        }), _jsx(SliderThumb, _objectSpread({\n          isVisible: allMeasured,\n          onLayout: this.measureThumb.bind(this),\n          style: thumbStyle,\n          color: thumbTintColor,\n          start: thumbStart,\n          vertical: this.isVertical\n        }, thumbProps)), _jsx(View, _objectSpread(_objectSpread({\n          style: StyleSheet.flatten([styles.touchArea, touchOverflowStyle])\n        }, this.panResponder.panHandlers), {}, {\n          children: debugTouchArea === true && this.renderDebugThumbTouchRect(thumbStart)\n        }))]\n      }));\n    }\n  }]);\n  return Slider;\n}(React.Component);\nvar SliderThumb = function SliderThumb(_ref4) {\n  var Component = _ref4.Component,\n    isVisible = _ref4.isVisible,\n    onLayout = _ref4.onLayout,\n    style = _ref4.style,\n    start = _ref4.start,\n    color = _ref4.color,\n    vertical = _ref4.vertical,\n    props = _objectWithoutProperties(_ref4, _excluded2);\n  var ThumbComponent = Component || Animated.View;\n  var axis = vertical ? 'translateY' : 'translateX';\n  var thumbPosition = [_defineProperty({}, axis, start)];\n  var styleTransform = style && style.transform || [];\n  var visibleStyle = isVisible ? {} : {\n    height: 0,\n    width: 0\n  };\n  return _jsx(ThumbComponent, _objectSpread({\n    testID: \"sliderThumb\",\n    onLayout: onLayout,\n    style: StyleSheet.flatten([_objectSpread({\n      backgroundColor: color,\n      transform: [].concat(thumbPosition, _toConsumableArray(styleTransform))\n    }, visibleStyle), styles.thumb, style])\n  }, props));\n};\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  allowTouchTrack: PropTypes.bool,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  trackStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  thumbStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  thumbProps: PropTypes.object,\n  debugTouchArea: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  animationConfig: PropTypes.object,\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array])\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  allowTouchTrack: false,\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});\nexport { Slider };\nexport default withTheme(Slider, 'Slider');","map":{"version":3,"names":["React","PropTypes","View","StyleSheet","Animated","Easing","PanResponder","Platform","withTheme","jsx","_jsx","jsxs","_jsxs","TRACK_SIZE","THUMB_SIZE","TRACK_STYLE","select","web","default","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","inOut","ease","delay","getBoundedValue","value","maximumValue","minimumValue","Math","max","min","Rect","x","y","width","height","_classCallCheck","_createClass","key","containsPoint","Slider","_React$Component","_inherits","_super","_createSuper","props","_this","call","measureContainer","handleMeasure","measureTrack","measureThumb","state","containerSize","trackSize","thumbSize","allMeasured","Value","panResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","_assertThisInitialized","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","isVertical","orientation","componentDidUpdate","prevProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","Object","assign","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","_","gestureState","disabled","getValue","thumbHitTest","_ref","nativeEvent","thumbTouchRect","getThumbTouchRect","locationX","locationY","e","allowTouchTrack","getOnTouchValue","event","_ref2","location","getValueForTouch","length","ratio","step","round","getTouchOverflowSize","_this$state","thumbTouchSize","size","getTouchOverflowStyle","_this$getTouchOverflo","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","_x$nativeEvent$layout","layout","layoutWidth","layoutHeight","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","dy","dx","__getValue","getRatio","_this$state2","touchOverflowSize","renderDebugThumbTouchRect","thumbLeft","positionStyle","left","top","style","pointerEvents","getMinimumTrackStyles","thumbStart","_this$state3","minimumTrackStyle","position","add","getThumbPositionStyles","_defineProperty","render","_this$props","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","trackStyle","thumbStyle","thumbProps","other","_objectWithoutProperties","_excluded","_this$state4","mainStyles","styles","appliedTrackStyle","flatten","track","interpolate","inputRange","outputRange","valueVisibleStyle","_objectSpread","containerVertical","containerHorizontal","onLayout","children","trackVertical","trackHorizontal","SliderThumb","isVisible","color","vertical","touchArea","panHandlers","Component","_ref4","_excluded2","ThumbComponent","axis","thumbPosition","styleTransform","transform","visibleStyle","testID","concat","_toConsumableArray","thumb","propTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","oneOfType","object","array","oneOf","defaultProps","justifyContent","flexDirection","alignItems","borderRadius","flex","right","bottom","debugThumbTouchArea"],"sources":["C:/Users/luizf/OneDrive/Área de Trabalho/App_Cuidadores/node_modules/react-native-elements/src/slider/Slider.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  View,\n  StyleSheet,\n  Animated,\n  Easing,\n  PanResponder,\n  Platform,\n} from 'react-native';\n\nimport { withTheme } from '../config';\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\nconst TRACK_STYLE = Platform.select({ web: 0, default: -1 });\n\nconst DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nconst getBoundedValue = (value, maximumValue, minimumValue) =>\n  Math.max(Math.min(value, maximumValue), minimumValue);\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  containsPoint(x, y) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nclass Slider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      allMeasured: false,\n      value: new Animated.Value(\n        getBoundedValue(props.value, props.maximumValue, props.minimumValue)\n      ),\n    };\n\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\n        this\n      ),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\n        this\n      ),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n    this.isVertical = props.orientation === 'vertical';\n  }\n\n  componentDidUpdate(prevProps) {\n    const newValue = getBoundedValue(\n      this.props.value,\n      this.props.maximumValue,\n      this.props.minimumValue\n    );\n\n    if (prevProps.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    const { animationType } = this.props;\n    const animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/* e: Object, gestureState: Object */) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/* e: Object, gestureState: Object */) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest({ nativeEvent }) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /* gestureState: Object */) {\n    // Should we become active when the user presses down on the thumb?\n    if (!this.props.allowTouchTrack) {\n      return this.thumbHitTest(e);\n    }\n    this.setCurrentValue(this.getOnTouchValue(e));\n    this.fireChangeEvent('onValueChange');\n    return true;\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  // get value of where some touched on slider.\n  getOnTouchValue({ nativeEvent }) {\n    const location = this.isVertical\n      ? nativeEvent.locationY\n      : nativeEvent.locationX;\n\n    return this.getValueForTouch(location);\n  }\n\n  getValueForTouch(location) {\n    const length = this.state.containerSize.width - this.state.thumbSize.width;\n    const ratio = location / length;\n    let newValue = ratio * (this.props.maximumValue - this.props.minimumValue);\n\n    if (this.props.step) {\n      newValue = Math.round(newValue / this.props.step) * this.props.step;\n    }\n    return getBoundedValue(\n      newValue + this.props.minimumValue,\n      this.props.maximumValue,\n      this.props.minimumValue\n    );\n  }\n\n  getTouchOverflowSize() {\n    const { thumbSize, allMeasured, containerSize } = this.state;\n    const { thumbTouchSize } = this.props;\n\n    const size = {};\n    if (allMeasured === true) {\n      size.width = Math.max(0, thumbTouchSize.width - thumbSize.width);\n      size.height = Math.max(0, thumbTouchSize.height - containerSize.height);\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    const { width, height } = this.getTouchOverflowSize();\n\n    const touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      const verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      const horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    const { width: layoutWidth, height: layoutHeight } = x.nativeEvent.layout;\n    const width = this.isVertical ? layoutHeight : layoutWidth;\n    const height = this.isVertical ? layoutWidth : layoutHeight;\n    const size = { width, height };\n    const storeName = `_${name}`;\n    const currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer = (x) => {\n    this.handleMeasure('containerSize', x);\n  };\n\n  measureTrack = (x) => {\n    this.handleMeasure('trackSize', x);\n  };\n\n  measureThumb = (x) => {\n    this.handleMeasure('thumbSize', x);\n  };\n\n  getValue(gestureState) {\n    const location =\n      this._previousLeft +\n      (this.isVertical ? gestureState.dy : gestureState.dx);\n\n    return this.getValueForTouch(location);\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbLeft(value) {\n    const ratio = this.getRatio(value);\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  }\n\n  getThumbTouchRect() {\n    const { thumbSize, containerSize } = this.state;\n    const { thumbTouchSize } = this.props;\n    const touchOverflowSize = this.getTouchOverflowSize();\n    const height =\n      touchOverflowSize.height / 2 +\n      (containerSize.height - thumbTouchSize.height) / 2;\n    const width =\n      touchOverflowSize.width / 2 +\n      this.getThumbLeft(this.getCurrentValue()) +\n      (thumbSize.width - thumbTouchSize.width) / 2;\n\n    if (this.isVertical) {\n      return new Rect(\n        height,\n        width,\n        thumbTouchSize.width,\n        thumbTouchSize.height\n      );\n    }\n    return new Rect(width, height, thumbTouchSize.width, thumbTouchSize.height);\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    const thumbTouchRect = this.getThumbTouchRect();\n    const positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  getMinimumTrackStyles(thumbStart) {\n    const { thumbSize, trackSize } = this.state;\n    const minimumTrackStyle = {\n      position: 'absolute',\n    };\n    if (this.isVertical) {\n      minimumTrackStyle.height = Animated.add(thumbStart, thumbSize.height / 2);\n      minimumTrackStyle.marginLeft = trackSize.width * TRACK_STYLE;\n    } else {\n      minimumTrackStyle.width = Animated.add(thumbStart, thumbSize.width / 2);\n      minimumTrackStyle.marginTop = trackSize.height * TRACK_STYLE;\n    }\n    return minimumTrackStyle;\n  }\n\n  getThumbPositionStyles(thumbStart) {\n    return [{ [this.isVertical ? 'translateY' : 'translateX']: thumbStart }];\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      thumbProps,\n      debugTouchArea,\n      orientation,\n      ...other\n    } = this.props;\n\n    const { value, containerSize, thumbSize, allMeasured } = this.state;\n\n    const mainStyles = containerStyle || styles;\n    const appliedTrackStyle = StyleSheet.flatten([styles.track, trackStyle]);\n    const thumbStart = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      // extrapolate: 'clamp',\n    });\n\n    const valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.height = 0;\n      valueVisibleStyle.width = 0;\n    }\n\n    const minimumTrackStyle = {\n      ...this.getMinimumTrackStyles(thumbStart),\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View\n        {...other}\n        style={StyleSheet.flatten([\n          this.isVertical\n            ? mainStyles.containerVertical\n            : mainStyles.containerHorizontal,\n          style,\n        ])}\n        onLayout={this.measureContainer}\n      >\n        <View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            this.isVertical\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            appliedTrackStyle,\n            { backgroundColor: maximumTrackTintColor },\n          ])}\n          onLayout={this.measureTrack}\n        />\n        <Animated.View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            this.isVertical\n              ? mainStyles.trackVertical\n              : mainStyles.trackHorizontal,\n            appliedTrackStyle,\n            minimumTrackStyle,\n          ])}\n        />\n        <SliderThumb\n          isVisible={allMeasured}\n          onLayout={this.measureThumb.bind(this)}\n          style={thumbStyle}\n          color={thumbTintColor}\n          start={thumbStart}\n          vertical={this.isVertical}\n          {...thumbProps}\n        />\n        <View\n          style={StyleSheet.flatten([styles.touchArea, touchOverflowStyle])}\n          {...this.panResponder.panHandlers}\n        >\n          {debugTouchArea === true &&\n            this.renderDebugThumbTouchRect(thumbStart)}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst SliderThumb = ({\n  Component,\n  isVisible,\n  onLayout,\n  style,\n  start,\n  color,\n  vertical,\n  ...props\n}) => {\n  const ThumbComponent = Component || Animated.View;\n  const axis = vertical ? 'translateY' : 'translateX';\n  const thumbPosition = [{ [axis]: start }];\n  const styleTransform = (style && style.transform) || [];\n  const visibleStyle = isVisible ? {} : { height: 0, width: 0 };\n\n  return (\n    <ThumbComponent\n      testID=\"sliderThumb\"\n      onLayout={onLayout}\n      style={StyleSheet.flatten([\n        {\n          backgroundColor: color,\n          transform: [...thumbPosition, ...styleTransform],\n          ...visibleStyle,\n        },\n        styles.thumb,\n        style,\n      ])}\n      {...props}\n    />\n  );\n};\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * If true, thumb will jump if user presses anywhere on the slide.\n   */\n  allowTouchTrack: PropTypes.bool,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n  /*\n   * The props applied to the thumb.\n   */\n  thumbProps: PropTypes.object,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n   * Set to true to animate values with default 'timing' animation type\n   */\n  animateTransitions: PropTypes.bool,\n\n  /**\n   * Custom Animation type. 'spring' or 'timing'.\n   */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n   * Choose the orientation. 'horizontal' or 'vertical'.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n   */\n  animationConfig: PropTypes.object,\n  containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  allowTouchTrack: false,\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  containerHorizontal: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  containerVertical: {\n    width: 40,\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  track: {\n    borderRadius: TRACK_SIZE / 2,\n  },\n  trackHorizontal: {\n    height: TRACK_SIZE,\n  },\n  trackVertical: {\n    flex: 1,\n    width: TRACK_SIZE,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n\nexport { Slider };\nexport default withTheme(Slider, 'Slider');\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}