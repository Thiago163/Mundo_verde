{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar MultipleSelectList = function MultipleSelectList(_ref) {\n  var fontFamily = _ref.fontFamily,\n    setSelected = _ref.setSelected,\n    placeholder = _ref.placeholder,\n    boxStyles = _ref.boxStyles,\n    inputStyles = _ref.inputStyles,\n    dropdownStyles = _ref.dropdownStyles,\n    dropdownItemStyles = _ref.dropdownItemStyles,\n    dropdownTextStyles = _ref.dropdownTextStyles,\n    maxHeight = _ref.maxHeight,\n    data = _ref.data,\n    _ref$searchicon = _ref.searchicon,\n    searchicon = _ref$searchicon === void 0 ? false : _ref$searchicon,\n    _ref$arrowicon = _ref.arrowicon,\n    arrowicon = _ref$arrowicon === void 0 ? false : _ref$arrowicon,\n    _ref$closeicon = _ref.closeicon,\n    closeicon = _ref$closeicon === void 0 ? false : _ref$closeicon,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? true : _ref$search,\n    _ref$searchPlaceholde = _ref.searchPlaceholder,\n    searchPlaceholder = _ref$searchPlaceholde === void 0 ? \"search\" : _ref$searchPlaceholde,\n    _ref$onSelect = _ref.onSelect,\n    onSelect = _ref$onSelect === void 0 ? function () {} : _ref$onSelect,\n    label = _ref.label,\n    _ref$notFoundText = _ref.notFoundText,\n    notFoundText = _ref$notFoundText === void 0 ? \"No data found\" : _ref$notFoundText,\n    disabledItemStyles = _ref.disabledItemStyles,\n    disabledTextStyles = _ref.disabledTextStyles,\n    disabledCheckBoxStyles = _ref.disabledCheckBoxStyles,\n    labelStyles = _ref.labelStyles,\n    badgeStyles = _ref.badgeStyles,\n    badgeTextStyles = _ref.badgeTextStyles,\n    checkBoxStyles = _ref.checkBoxStyles,\n    _ref$save = _ref.save,\n    save = _ref$save === void 0 ? 'key' : _ref$save,\n    _ref$dropdownShown = _ref.dropdownShown,\n    dropdownShown = _ref$dropdownShown === void 0 ? false : _ref$dropdownShown;\n  var oldOption = React.useRef(null);\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    _firstRender = _React$useState2[0],\n    _setFirstRender = _React$useState2[1];\n  var _React$useState3 = React.useState(dropdownShown),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    dropdown = _React$useState4[0],\n    setDropdown = _React$useState4[1];\n  var _React$useState5 = React.useState([]),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    selectedval = _React$useState6[0],\n    setSelectedVal = _React$useState6[1];\n  var _React$useState7 = React.useState(350),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    height = _React$useState8[0],\n    setHeight = _React$useState8[1];\n  var animatedvalue = React.useRef(new Animated.Value(0)).current;\n  var _React$useState9 = React.useState(data),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    filtereddata = _React$useState10[0],\n    setFilteredData = _React$useState10[1];\n  var slidedown = function slidedown() {\n    setDropdown(true);\n    Animated.timing(animatedvalue, {\n      toValue: height,\n      duration: 500,\n      useNativeDriver: false\n    }).start();\n  };\n  var slideup = function slideup() {\n    Animated.timing(animatedvalue, {\n      toValue: 0,\n      duration: 500,\n      useNativeDriver: false\n    }).start(function () {\n      return setDropdown(false);\n    });\n  };\n  React.useEffect(function () {\n    if (maxHeight) setHeight(maxHeight);\n  }, [maxHeight]);\n  React.useEffect(function () {\n    setFilteredData(data);\n  }, [data]);\n  React.useEffect(function () {\n    if (_firstRender) {\n      _setFirstRender(false);\n      return;\n    }\n    onSelect();\n  }, [selectedval]);\n  React.useEffect(function () {\n    if (!_firstRender) {\n      if (dropdownShown) slidedown();else slideup();\n    }\n  }, [dropdownShown]);\n  return _jsxs(View, {\n    children: [dropdown && search ? _jsx(View, {\n      style: [styles.wrapper, boxStyles],\n      children: _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          alignItems: 'center',\n          flex: 1\n        },\n        children: [!searchicon ? _jsx(Image, {\n          source: require(\"../assets/images/search.png\"),\n          resizeMode: \"contain\",\n          style: {\n            width: 20,\n            height: 20,\n            marginRight: 7\n          }\n        }) : searchicon, _jsx(TextInput, {\n          placeholder: searchPlaceholder,\n          onChangeText: function onChangeText(val) {\n            var result = data.filter(function (item) {\n              val.toLowerCase();\n              var row = item.value.toLowerCase();\n              return row.search(val.toLowerCase()) > -1;\n            });\n            setFilteredData(result);\n          },\n          style: [{\n            padding: 0,\n            height: 20,\n            flex: 1,\n            fontFamily: fontFamily\n          }, inputStyles]\n        }), _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            slideup();\n          },\n          children: !closeicon ? _jsx(Image, {\n            source: require(\"../assets/images/close.png\"),\n            resizeMode: \"contain\",\n            style: {\n              width: 17,\n              height: 17\n            }\n          }) : closeicon\n        })]\n      })\n    }) : (selectedval == null ? void 0 : selectedval.length) > 0 ? _jsx(TouchableOpacity, {\n      style: [styles.wrapper, boxStyles],\n      onPress: function onPress() {\n        if (!dropdown) {\n          slidedown();\n        } else {\n          slideup();\n        }\n      },\n      children: _jsxs(View, {\n        children: [_jsx(Text, {\n          style: [{\n            fontWeight: '600',\n            fontFamily: fontFamily\n          }, labelStyles],\n          children: label\n        }), _jsx(View, {\n          style: {\n            flexDirection: 'row',\n            marginBottom: 8,\n            flexWrap: 'wrap'\n          },\n          children: selectedval == null ? void 0 : selectedval.map(function (item, index) {\n            return _jsx(View, {\n              style: [{\n                backgroundColor: 'gray',\n                paddingHorizontal: 20,\n                paddingVertical: 5,\n                borderRadius: 50,\n                marginRight: 10,\n                marginTop: 10\n              }, badgeStyles],\n              children: _jsx(Text, {\n                style: [{\n                  color: 'white',\n                  fontSize: 12,\n                  fontFamily: fontFamily\n                }, badgeTextStyles],\n                children: item\n              })\n            }, index);\n          })\n        })]\n      })\n    }) : _jsxs(TouchableOpacity, {\n      style: [styles.wrapper, boxStyles],\n      onPress: function onPress() {\n        if (!dropdown) {\n          slidedown();\n        } else {\n          slideup();\n        }\n      },\n      children: [_jsx(Text, {\n        style: [{\n          fontFamily: fontFamily\n        }, inputStyles],\n        children: selectedval == \"\" ? placeholder ? placeholder : 'Select option' : selectedval\n      }), !arrowicon ? _jsx(Image, {\n        source: require(\"../assets/images/chevron.png\"),\n        resizeMode: \"contain\",\n        style: {\n          width: 20,\n          height: 20\n        }\n      }) : arrowicon]\n    }), dropdown ? _jsx(Animated.View, {\n      style: [{\n        maxHeight: animatedvalue\n      }, styles.dropdown, dropdownStyles],\n      children: _jsxs(View, {\n        style: [{\n          maxHeight: height\n        }],\n        children: [_jsx(ScrollView, {\n          contentContainerStyle: {\n            paddingVertical: 10\n          },\n          nestedScrollEnabled: true,\n          children: filtereddata.length >= 1 ? filtereddata.map(function (item, index) {\n            var _ref2, _item$key, _item$value, _item$disabled;\n            var key = (_ref2 = (_item$key = item.key) != null ? _item$key : item.value) != null ? _ref2 : item;\n            var value = (_item$value = item.value) != null ? _item$value : item;\n            var disabled = (_item$disabled = item.disabled) != null ? _item$disabled : false;\n            if (disabled) {\n              return _jsxs(TouchableOpacity, {\n                style: [styles.disabledoption, disabledItemStyles],\n                children: [_jsx(View, {\n                  style: [{\n                    width: 15,\n                    height: 15,\n                    marginRight: 10,\n                    borderRadius: 3,\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    backgroundColor: '#c4c5c6'\n                  }, disabledCheckBoxStyles],\n                  children: selectedval != null && selectedval.includes(value) ? _jsx(Image, {\n                    source: require(\"../assets/images/check.png\"),\n                    resizeMode: \"contain\",\n                    style: [{\n                      width: 8,\n                      height: 8,\n                      paddingLeft: 7\n                    }]\n                  }, index) : null\n                }), _jsx(Text, {\n                  style: [{\n                    fontFamily: fontFamily,\n                    color: '#c4c5c6'\n                  }, disabledTextStyles],\n                  children: value\n                })]\n              }, index);\n            } else {\n              return _jsxs(TouchableOpacity, {\n                style: [styles.option, dropdownItemStyles],\n                onPress: function onPress() {\n                  var existing = selectedval == null ? void 0 : selectedval.indexOf(value);\n                  if (existing != -1 && existing != undefined) {\n                    var sv = _toConsumableArray(selectedval);\n                    sv.splice(existing, 1);\n                    setSelectedVal(sv);\n                    setSelected(function (val) {\n                      var temp = _toConsumableArray(val);\n                      temp.splice(existing, 1);\n                      return temp;\n                    });\n                  } else {\n                    if (save === 'value') {\n                      setSelected(function (val) {\n                        var temp = _toConsumableArray(new Set([].concat(_toConsumableArray(val), [value])));\n                        return temp;\n                      });\n                    } else {\n                      setSelected(function (val) {\n                        var temp = _toConsumableArray(new Set([].concat(_toConsumableArray(val), [key])));\n                        return temp;\n                      });\n                    }\n                    setSelectedVal(function (val) {\n                      var temp = _toConsumableArray(new Set([].concat(_toConsumableArray(val), [value])));\n                      return temp;\n                    });\n                  }\n                },\n                children: [_jsx(View, {\n                  style: [{\n                    width: 15,\n                    height: 15,\n                    borderWidth: 1,\n                    marginRight: 10,\n                    borderColor: 'gray',\n                    borderRadius: 3,\n                    justifyContent: 'center',\n                    alignItems: 'center'\n                  }, checkBoxStyles],\n                  children: selectedval != null && selectedval.includes(value) ? _jsx(Image, {\n                    source: require(\"../assets/images/check.png\"),\n                    resizeMode: \"contain\",\n                    style: {\n                      width: 8,\n                      height: 8,\n                      paddingLeft: 7\n                    }\n                  }, index) : null\n                }), _jsx(Text, {\n                  style: [{\n                    fontFamily: fontFamily\n                  }, dropdownTextStyles],\n                  children: value\n                })]\n              }, index);\n            }\n          }) : _jsx(TouchableOpacity, {\n            style: [styles.option, dropdownItemStyles],\n            onPress: function onPress() {\n              setSelected(undefined);\n              setSelectedVal(\"\");\n              slideup();\n              setTimeout(function () {\n                return setFilteredData(data);\n              }, 800);\n            },\n            children: _jsx(Text, {\n              style: dropdownTextStyles,\n              children: notFoundText\n            })\n          })\n        }), (selectedval == null ? void 0 : selectedval.length) > 0 ? _jsxs(Pressable, {\n          children: [_jsxs(View, {\n            style: {\n              flexDirection: 'row',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              paddingLeft: 20\n            },\n            children: [_jsx(Text, {\n              style: {\n                marginRight: 20,\n                fontWeight: '600',\n                fontFamily: fontFamily\n              },\n              children: \"Selected\"\n            }), _jsx(View, {\n              style: {\n                height: 1,\n                flex: 1,\n                backgroundColor: 'gray'\n              }\n            })]\n          }), _jsx(View, {\n            style: {\n              flexDirection: 'row',\n              paddingHorizontal: 20,\n              marginBottom: 20,\n              flexWrap: 'wrap'\n            },\n            children: selectedval == null ? void 0 : selectedval.map(function (item, index) {\n              return _jsx(View, {\n                style: [{\n                  backgroundColor: 'gray',\n                  paddingHorizontal: 20,\n                  paddingVertical: 5,\n                  borderRadius: 50,\n                  marginRight: 10,\n                  marginTop: 10\n                }, badgeStyles],\n                children: _jsx(Text, {\n                  style: [{\n                    color: 'white',\n                    fontSize: 12,\n                    fontFamily: fontFamily\n                  }, badgeTextStyles],\n                  children: item\n                })\n              }, index);\n            })\n          })]\n        }) : null]\n      })\n    }) : null]\n  });\n};\nexport default MultipleSelectList;\nvar styles = StyleSheet.create({\n  wrapper: {\n    borderWidth: 1,\n    borderRadius: 10,\n    borderColor: 'gray',\n    paddingHorizontal: 20,\n    paddingVertical: 12,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 10\n  },\n  dropdown: {\n    borderWidth: 1,\n    borderRadius: 10,\n    borderColor: 'gray',\n    overflow: 'hidden'\n  },\n  option: {\n    paddingHorizontal: 20,\n    paddingVertical: 8,\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  disabledoption: {\n    paddingHorizontal: 20,\n    paddingVertical: 8,\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'whitesmoke'\n  }\n});","map":{"version":3,"names":["React","View","Text","StyleSheet","Image","TouchableOpacity","ScrollView","Animated","TextInput","Pressable","jsx","_jsx","jsxs","_jsxs","MultipleSelectList","_ref","fontFamily","setSelected","placeholder","boxStyles","inputStyles","dropdownStyles","dropdownItemStyles","dropdownTextStyles","maxHeight","data","_ref$searchicon","searchicon","_ref$arrowicon","arrowicon","_ref$closeicon","closeicon","_ref$search","search","_ref$searchPlaceholde","searchPlaceholder","_ref$onSelect","onSelect","label","_ref$notFoundText","notFoundText","disabledItemStyles","disabledTextStyles","disabledCheckBoxStyles","labelStyles","badgeStyles","badgeTextStyles","checkBoxStyles","_ref$save","save","_ref$dropdownShown","dropdownShown","oldOption","useRef","_React$useState","useState","_React$useState2","_slicedToArray","_firstRender","_setFirstRender","_React$useState3","_React$useState4","dropdown","setDropdown","_React$useState5","_React$useState6","selectedval","setSelectedVal","_React$useState7","_React$useState8","height","setHeight","animatedvalue","Value","current","_React$useState9","_React$useState10","filtereddata","setFilteredData","slidedown","timing","toValue","duration","useNativeDriver","start","slideup","useEffect","children","style","styles","wrapper","flexDirection","alignItems","flex","source","require","resizeMode","width","marginRight","onChangeText","val","result","filter","item","toLowerCase","row","value","padding","onPress","length","fontWeight","marginBottom","flexWrap","map","index","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","marginTop","color","fontSize","contentContainerStyle","nestedScrollEnabled","_ref2","_item$key","_item$value","_item$disabled","key","disabled","disabledoption","justifyContent","includes","paddingLeft","option","existing","indexOf","undefined","sv","_toConsumableArray","splice","temp","Set","concat","borderWidth","borderColor","setTimeout","create","overflow"],"sources":["D:/home/aluno/Desktop/App_Cuidadores/node_modules/react-native-dropdown-select-list/components/MultipleSelectList.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n    View,\r\n    Text,\r\n    StyleSheet,\r\n    Image,\r\n    TouchableOpacity,\r\n    ScrollView,\r\n    Animated,\r\n    TextInput,\r\n    ViewStyle,\r\n    Pressable} from 'react-native';\r\n\r\nimport { MultipleSelectListProps } from '..';\r\n\r\ntype L1Keys = { key?: any; value?: any; disabled?: boolean | undefined }\r\n\r\nconst MultipleSelectList: React.FC<MultipleSelectListProps> = ({\r\n        fontFamily,\r\n        setSelected,\r\n        placeholder,\r\n        boxStyles,\r\n        inputStyles,\r\n        dropdownStyles,\r\n        dropdownItemStyles,\r\n        dropdownTextStyles,\r\n        maxHeight,\r\n        data,\r\n        searchicon = false,\r\n        arrowicon = false,\r\n        closeicon = false,\r\n        search = true,\r\n        searchPlaceholder = \"search\",\r\n        onSelect = () => {},\r\n        label,\r\n        notFoundText = \"No data found\",\r\n        disabledItemStyles,\r\n        disabledTextStyles,\r\n        disabledCheckBoxStyles,\r\n        labelStyles,\r\n        badgeStyles,\r\n        badgeTextStyles,\r\n        checkBoxStyles,\r\n        save = 'key',\r\n        dropdownShown = false\r\n    }) => {\r\n\r\n    const oldOption = React.useRef(null)\r\n    const [_firstRender,_setFirstRender] = React.useState<boolean>(true);\r\n    const [dropdown, setDropdown] = React.useState<boolean>(dropdownShown);\r\n    const [selectedval, setSelectedVal] = React.useState<any>([]);\r\n    const [height,setHeight] = React.useState<number>(350)\r\n    const animatedvalue = React.useRef(new Animated.Value(0)).current;\r\n    const [filtereddata,setFilteredData] = React.useState(data);\r\n\r\n\r\n    const slidedown = () => {\r\n        setDropdown(true)\r\n        \r\n        Animated.timing(animatedvalue,{\r\n            toValue:height,\r\n            duration:500,\r\n            useNativeDriver:false,\r\n            \r\n        }).start()\r\n    }\r\n    const slideup = () => {\r\n        \r\n        Animated.timing(animatedvalue,{\r\n            toValue:0,\r\n            duration:500,\r\n            useNativeDriver:false,\r\n            \r\n        }).start(() => setDropdown(false))\r\n    }\r\n\r\n    React.useEffect( () => {\r\n        if(maxHeight)\r\n            setHeight(maxHeight)\r\n    },[maxHeight])\r\n\r\n    \r\n    React.useEffect(() => {\r\n        setFilteredData(data);\r\n      },[data])\r\n\r\n\r\n    React.useEffect(() => {\r\n        if(_firstRender){\r\n          _setFirstRender(false);\r\n          return;\r\n        }\r\n        onSelect()\r\n        \r\n    },[selectedval])\r\n\r\n    React.useEffect(() => {\r\n        if(!_firstRender){\r\n            if(dropdownShown)\r\n                slidedown();\r\n            else\r\n                slideup();\r\n            \r\n        }\r\n        \r\n    },[dropdownShown])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <View>\r\n            {\r\n                (dropdown && search)\r\n                ?\r\n                    <View style={[styles.wrapper,boxStyles]}>\r\n                        <View style={{flexDirection:'row',alignItems:'center',flex:1}}> \r\n                            {\r\n                                (!searchicon)\r\n                                ?\r\n                                <Image \r\n                                    source={require('../assets/images/search.png')}\r\n                                    resizeMode='contain'\r\n                                    style={{width:20,height:20,marginRight:7}}\r\n                                />\r\n                                :\r\n                                searchicon\r\n                            }\r\n                            \r\n                            <TextInput \r\n                                placeholder={searchPlaceholder}\r\n                                onChangeText={(val) => {\r\n                                    let result =  data.filter((item: L1Keys) => {\r\n                                        val.toLowerCase();\r\n                                        let row = item.value.toLowerCase()\r\n                                        return row.search(val.toLowerCase()) > -1;\r\n                                    });\r\n                                    setFilteredData(result)\r\n                                }}\r\n                                style={[{padding:0,height:20,flex:1,fontFamily},inputStyles]}\r\n                            />\r\n                                <TouchableOpacity onPress={() => {\r\n                                    slideup()\r\n                                    // setTimeout(() => setFilteredData(data), 800)\r\n                                }} >\r\n                                    {\r\n                                        (!closeicon)\r\n                                        ?\r\n                                            <Image \r\n                                                source={require('../assets/images/close.png')}\r\n                                                resizeMode='contain'\r\n                                                style={{width:17,height:17}}\r\n                                            />\r\n                                        :\r\n                                            closeicon\r\n                                    }\r\n                                </TouchableOpacity>\r\n                                \r\n                           \r\n                        </View>\r\n                        \r\n                    </View>\r\n                :\r\n\r\n                (selectedval?.length > 0 )\r\n\r\n                ?\r\n                    <TouchableOpacity style={[styles.wrapper,boxStyles]} onPress={() => { if(!dropdown){ slidedown() }else{ slideup() } }} >\r\n                        <View>\r\n                            <Text style={[{fontWeight:'600',fontFamily},labelStyles]}>{ label }</Text>\r\n                            <View style={{flexDirection:'row',marginBottom:8,flexWrap:'wrap'}}>\r\n                                {\r\n                                    selectedval?.map((item,index) => {\r\n                                        return (\r\n                                            <View key={index} style={[{backgroundColor:'gray',paddingHorizontal:20,paddingVertical:5,borderRadius:50,marginRight:10,marginTop:10}, badgeStyles]}>\r\n                                                <Text style={[{color:'white',fontSize:12,fontFamily}, badgeTextStyles]}>{item}</Text>\r\n                                            </View>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </View>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                :\r\n                    <TouchableOpacity style={[styles.wrapper,boxStyles]} onPress={() => { if(!dropdown){ slidedown() }else{ slideup() } }}>\r\n                        <Text style={[{fontFamily},inputStyles]}>{ (selectedval == \"\") ? (placeholder) ? placeholder : 'Select option' : selectedval  }</Text>\r\n                        {\r\n                            (!arrowicon)\r\n                            ?\r\n                                <Image \r\n                                    source={require('../assets/images/chevron.png')}\r\n                                    resizeMode='contain'\r\n                                    style={{width:20,height:20}}\r\n                                />\r\n                            :\r\n                                arrowicon\r\n                        }\r\n                        \r\n                    </TouchableOpacity>\r\n            }\r\n            \r\n            {\r\n                (dropdown)\r\n                ?\r\n                    <Animated.View style={[{maxHeight:animatedvalue},styles.dropdown, dropdownStyles]}>\r\n                        <View style={[{maxHeight:height}]}>\r\n                            <ScrollView contentContainerStyle={{paddingVertical:10}} nestedScrollEnabled={true}>\r\n\r\n                                {\r\n                                    (filtereddata.length >=  1)\r\n                                    ?\r\n                                    filtereddata.map((item: L1Keys,index: number) => {\r\n                                        let key = item.key ?? item.value ?? item;\r\n                                        let value = item.value ?? item;\r\n                                        let disabled = item.disabled ?? false;\r\n                                        if(disabled){\r\n                                            return(\r\n                                                <TouchableOpacity style={[styles.disabledoption,disabledItemStyles]} key={index}>\r\n                                                    <View style={[{width:15,height:15,marginRight:10,borderRadius:3,justifyContent:'center',alignItems:'center',backgroundColor:'#c4c5c6'},disabledCheckBoxStyles]}>\r\n                                                        \r\n                                                        {\r\n                                                            (selectedval?.includes(value))\r\n                                                            ?\r\n                                                                \r\n                                                                <Image \r\n                                                                    key={index}\r\n                                                                    source={require('../assets/images/check.png')}\r\n                                                                    resizeMode='contain'\r\n                                                                    style={[{width:8,height:8,paddingLeft:7}]}\r\n                                                                />\r\n                                                \r\n                                                            :\r\n                                                            null\r\n\r\n                                                        }\r\n                                                    </View>\r\n                                                    <Text style={[{fontFamily,color:'#c4c5c6'},disabledTextStyles]}>{value}</Text>\r\n                                                </TouchableOpacity>\r\n                                            )\r\n                                        }else{\r\n                                            return(\r\n                                                <TouchableOpacity style={[styles.option,dropdownItemStyles]} key={index} onPress={ () => {\r\n\r\n                                                    \r\n                                                    let existing = selectedval?.indexOf(value)\r\n\r\n\r\n                                                    // console.log(existing);\r\n\r\n                                                    if(existing != -1  && existing != undefined){\r\n\r\n                                                        let sv = [...selectedval];\r\n                                                        sv.splice(existing,1) \r\n                                                        setSelectedVal(sv);\r\n\r\n\r\n                                                        setSelected((val: any) => {\r\n                                                            let temp = [...val];\r\n                                                            temp.splice(existing,1) \r\n                                                            return temp;\r\n                                                        });\r\n                                                        \r\n                                                        // onSelect()\r\n                                                    }else{\r\n                                                        if(save === 'value'){\r\n                                                            setSelected((val: any) => {\r\n                                                                let temp = [...new Set([...val,value])];\r\n                                                                return temp;\r\n                                                            })\r\n                                                        }else{\r\n                                                            setSelected((val: any) => {\r\n                                                                let temp = [...new Set([...val,key])];\r\n                                                                return temp;\r\n                                                            })\r\n                                                        }\r\n                                                       \r\n                                                        setSelectedVal((val: any )=> {\r\n                                                            let temp = [...new Set([...val,value])];\r\n                                                            return temp;\r\n                                                        })\r\n                                    \r\n                                                        \r\n                                                        // onSelect()\r\n                                                    }\r\n                                                    \r\n                                                    \r\n                                                    \r\n                                                }}>\r\n                                                    <View style={[{width:15,height:15,borderWidth:1,marginRight:10,borderColor:'gray',borderRadius:3,justifyContent:'center',alignItems:'center'},checkBoxStyles]}>\r\n                                                        \r\n                                                        {\r\n                                                            (selectedval?.includes(value))\r\n                                                            ?\r\n                                                                \r\n                                                                <Image \r\n                                                                    key={index}\r\n                                                                    source={require('../assets/images/check.png')}\r\n                                                                    resizeMode='contain'\r\n                                                                    style={{width:8,height:8,paddingLeft:7}}\r\n                                                                />\r\n                                                \r\n                                                            :\r\n                                                            null\r\n\r\n                                                        }\r\n                                                            \r\n\r\n                                                        \r\n                                                        \r\n                                                    </View>\r\n                                                    <Text style={[{fontFamily},dropdownTextStyles]}>{value}</Text>\r\n                                                </TouchableOpacity>\r\n                                            )\r\n                                        }\r\n                                        \r\n                                    })\r\n                                    :\r\n                                    <TouchableOpacity style={[styles.option,dropdownItemStyles]} onPress={ () => {\r\n                                        setSelected(undefined)\r\n                                        setSelectedVal(\"\")\r\n                                        slideup()\r\n                                        setTimeout(() => setFilteredData(data), 800)  \r\n                                    }}>\r\n                                        <Text style={dropdownTextStyles}>{notFoundText}</Text>\r\n                                    </TouchableOpacity>\r\n                                }\r\n                                \r\n                                \r\n                                \r\n                            </ScrollView>\r\n                            \r\n                                {\r\n                                    (selectedval?.length > 0)\r\n                                    ?\r\n                                        <Pressable>\r\n                                            <View style={{flexDirection:'row', justifyContent:'space-between',alignItems:'center',paddingLeft:20}}>\r\n                                                <Text style={{marginRight:20,fontWeight:'600',fontFamily}}>Selected</Text>\r\n                                                <View style={{height: 1, flex: 1, backgroundColor: 'gray'}} />\r\n                                            </View>\r\n                                            <View style={{flexDirection:'row',paddingHorizontal:20,marginBottom:20,flexWrap:'wrap'}}>\r\n                                            \r\n                                                {\r\n                                                    selectedval?.map((item,index) => {\r\n                                                        return (\r\n                                                            <View key={index} style={[{backgroundColor:'gray',paddingHorizontal:20,paddingVertical:5,borderRadius:50,marginRight:10,marginTop:10},badgeStyles]}>\r\n                                                                <Text style={[{color:'white',fontSize:12,fontFamily},badgeTextStyles]}>{item}</Text>\r\n                                                            </View>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n\r\n                                            </View>\r\n                                        </Pressable>\r\n                                    :\r\n                                    null\r\n                                }\r\n                                \r\n                                \r\n                            \r\n                        </View>\r\n                       \r\n                    </Animated.View>\r\n                :\r\n                null\r\n            }\r\n            \r\n            \r\n        </View>\r\n    )\r\n}\r\n\r\nexport default MultipleSelectList;\r\n\r\nconst styles = StyleSheet.create({\r\n    wrapper:{ borderWidth:1,borderRadius:10,borderColor:'gray',paddingHorizontal:20,paddingVertical:12,flexDirection:'row',justifyContent:'space-between',marginBottom:10 },\r\n    dropdown:{ borderWidth:1,borderRadius:10,borderColor:'gray',overflow:'hidden'},\r\n    option:{ paddingHorizontal:20,paddingVertical:8,flexDirection:'row',alignItems:'center'},\r\n    disabledoption:{ paddingHorizontal:20,paddingVertical:8,flexDirection:'row',alignItems:'center', backgroundColor:'whitesmoke'}\r\n\r\n})\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAiB1B,IAAMC,kBAAqD,GAAG,SAAxDA,kBAAqDA,CAAAC,IAAA,EA4BjD;EAAA,IA3BFC,UAAU,GAAAD,IAAA,CAAVC,UAAU;IACVC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IACXC,WAAW,GAAAH,IAAA,CAAXG,WAAW;IACXC,SAAS,GAAAJ,IAAA,CAATI,SAAS;IACTC,WAAW,GAAAL,IAAA,CAAXK,WAAW;IACXC,cAAc,GAAAN,IAAA,CAAdM,cAAc;IACdC,kBAAkB,GAAAP,IAAA,CAAlBO,kBAAkB;IAClBC,kBAAkB,GAAAR,IAAA,CAAlBQ,kBAAkB;IAClBC,SAAS,GAAAT,IAAA,CAATS,SAAS;IACTC,IAAI,GAAAV,IAAA,CAAJU,IAAI;IAAAC,eAAA,GAAAX,IAAA,CACJY,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA;IAAAE,cAAA,GAAAb,IAAA,CAClBc,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,KAAK,GAAAA,cAAA;IAAAE,cAAA,GAAAf,IAAA,CACjBgB,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,KAAK,GAAAA,cAAA;IAAAE,WAAA,GAAAjB,IAAA,CACjBkB,MAAM;IAANA,MAAM,GAAAD,WAAA,cAAG,IAAI,GAAAA,WAAA;IAAAE,qBAAA,GAAAnB,IAAA,CACboB,iBAAiB;IAAjBA,iBAAiB,GAAAD,qBAAA,cAAG,QAAQ,GAAAA,qBAAA;IAAAE,aAAA,GAAArB,IAAA,CAC5BsB,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,YAAM,CAAC,CAAC,GAAAA,aAAA;IACnBE,KAAK,GAAAvB,IAAA,CAALuB,KAAK;IAAAC,iBAAA,GAAAxB,IAAA,CACLyB,YAAY;IAAZA,YAAY,GAAAD,iBAAA,cAAG,eAAe,GAAAA,iBAAA;IAC9BE,kBAAkB,GAAA1B,IAAA,CAAlB0B,kBAAkB;IAClBC,kBAAkB,GAAA3B,IAAA,CAAlB2B,kBAAkB;IAClBC,sBAAsB,GAAA5B,IAAA,CAAtB4B,sBAAsB;IACtBC,WAAW,GAAA7B,IAAA,CAAX6B,WAAW;IACXC,WAAW,GAAA9B,IAAA,CAAX8B,WAAW;IACXC,eAAe,GAAA/B,IAAA,CAAf+B,eAAe;IACfC,cAAc,GAAAhC,IAAA,CAAdgC,cAAc;IAAAC,SAAA,GAAAjC,IAAA,CACdkC,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAG,KAAK,GAAAA,SAAA;IAAAE,kBAAA,GAAAnC,IAAA,CACZoC,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG,KAAK,GAAAA,kBAAA;EAGzB,IAAME,SAAS,GAAGpD,KAAK,CAACqD,MAAM,CAAC,IAAI,CAAC;EACpC,IAAAC,eAAA,GAAuCtD,KAAK,CAACuD,QAAQ,CAAU,IAAI,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA7DI,YAAY,GAAAF,gBAAA;IAACG,eAAe,GAAAH,gBAAA;EACnC,IAAAI,gBAAA,GAAgC5D,KAAK,CAACuD,QAAQ,CAAUJ,aAAa,CAAC;IAAAU,gBAAA,GAAAJ,cAAA,CAAAG,gBAAA;IAA/DE,QAAQ,GAAAD,gBAAA;IAAEE,WAAW,GAAAF,gBAAA;EAC5B,IAAAG,gBAAA,GAAsChE,KAAK,CAACuD,QAAQ,CAAM,EAAE,CAAC;IAAAU,gBAAA,GAAAR,cAAA,CAAAO,gBAAA;IAAtDE,WAAW,GAAAD,gBAAA;IAAEE,cAAc,GAAAF,gBAAA;EAClC,IAAAG,gBAAA,GAA2BpE,KAAK,CAACuD,QAAQ,CAAS,GAAG,CAAC;IAAAc,gBAAA,GAAAZ,cAAA,CAAAW,gBAAA;IAA/CE,MAAM,GAAAD,gBAAA;IAACE,SAAS,GAAAF,gBAAA;EACvB,IAAMG,aAAa,GAAGxE,KAAK,CAACqD,MAAM,CAAC,IAAI9C,QAAQ,CAACkE,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO;EACjE,IAAAC,gBAAA,GAAuC3E,KAAK,CAACuD,QAAQ,CAAC9B,IAAI,CAAC;IAAAmD,iBAAA,GAAAnB,cAAA,CAAAkB,gBAAA;IAApDE,YAAY,GAAAD,iBAAA;IAACE,eAAe,GAAAF,iBAAA;EAGnC,IAAMG,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;IACpBhB,WAAW,CAAC,IAAI,CAAC;IAEjBxD,QAAQ,CAACyE,MAAM,CAACR,aAAa,EAAC;MAC1BS,OAAO,EAACX,MAAM;MACdY,QAAQ,EAAC,GAAG;MACZC,eAAe,EAAC;IAEpB,CAAC,CAAC,CAACC,KAAK,EAAE;EACd,CAAC;EACD,IAAMC,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;IAElB9E,QAAQ,CAACyE,MAAM,CAACR,aAAa,EAAC;MAC1BS,OAAO,EAAC,CAAC;MACTC,QAAQ,EAAC,GAAG;MACZC,eAAe,EAAC;IAEpB,CAAC,CAAC,CAACC,KAAK,CAAC;MAAA,OAAMrB,WAAW,CAAC,KAAK,CAAC;IAAA,EAAC;EACtC,CAAC;EAED/D,KAAK,CAACsF,SAAS,CAAE,YAAM;IACnB,IAAG9D,SAAS,EACR+C,SAAS,CAAC/C,SAAS,CAAC;EAC5B,CAAC,EAAC,CAACA,SAAS,CAAC,CAAC;EAGdxB,KAAK,CAACsF,SAAS,CAAC,YAAM;IAClBR,eAAe,CAACrD,IAAI,CAAC;EACvB,CAAC,EAAC,CAACA,IAAI,CAAC,CAAC;EAGXzB,KAAK,CAACsF,SAAS,CAAC,YAAM;IAClB,IAAG5B,YAAY,EAAC;MACdC,eAAe,CAAC,KAAK,CAAC;MACtB;IACF;IACAtB,QAAQ,EAAE;EAEd,CAAC,EAAC,CAAC6B,WAAW,CAAC,CAAC;EAEhBlE,KAAK,CAACsF,SAAS,CAAC,YAAM;IAClB,IAAG,CAAC5B,YAAY,EAAC;MACb,IAAGP,aAAa,EACZ4B,SAAS,EAAE,CAAC,KAEZM,OAAO,EAAE;IAEjB;EAEJ,CAAC,EAAC,CAAClC,aAAa,CAAC,CAAC;EAOlB,OACItC,KAAA,CAACZ,IAAI;IAAAsF,QAAA,GAEIzB,QAAQ,IAAI7B,MAAM,GAEftB,IAAA,CAACV,IAAI;MAACuF,KAAK,EAAE,CAACC,MAAM,CAACC,OAAO,EAACvE,SAAS,CAAE;MAAAoE,QAAA,EACpC1E,KAAA,CAACZ,IAAI;QAACuF,KAAK,EAAE;UAACG,aAAa,EAAC,KAAK;UAACC,UAAU,EAAC,QAAQ;UAACC,IAAI,EAAC;QAAC,CAAE;QAAAN,QAAA,GAErD,CAAC5D,UAAU,GAEZhB,IAAA,CAACP,KAAK;UACF0F,MAAM,EAAEC,OAAO,+BAAgC;UAC/CC,UAAU,EAAC,SAAS;UACpBR,KAAK,EAAE;YAACS,KAAK,EAAC,EAAE;YAAC3B,MAAM,EAAC,EAAE;YAAC4B,WAAW,EAAC;UAAC;QAAE,EAC5C,GAEFvE,UAAU,EAGdhB,IAAA,CAACH,SAAS;UACNU,WAAW,EAAEiB,iBAAkB;UAC/BgE,YAAY,EAAE,SAAAA,aAACC,GAAG,EAAK;YACnB,IAAIC,MAAM,GAAI5E,IAAI,CAAC6E,MAAM,CAAC,UAACC,IAAY,EAAK;cACxCH,GAAG,CAACI,WAAW,EAAE;cACjB,IAAIC,GAAG,GAAGF,IAAI,CAACG,KAAK,CAACF,WAAW,EAAE;cAClC,OAAOC,GAAG,CAACxE,MAAM,CAACmE,GAAG,CAACI,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC;YAC7C,CAAC,CAAC;YACF1B,eAAe,CAACuB,MAAM,CAAC;UAC3B,CAAE;UACFb,KAAK,EAAE,CAAC;YAACmB,OAAO,EAAC,CAAC;YAACrC,MAAM,EAAC,EAAE;YAACuB,IAAI,EAAC,CAAC;YAAC7E,UAAU,EAAVA;UAAU,CAAC,EAACI,WAAW;QAAE,EAC/D,EACET,IAAA,CAACN,gBAAgB;UAACuG,OAAO,EAAE,SAAAA,QAAA,EAAM;YAC7BvB,OAAO,EAAE;UAEb,CAAE;UAAAE,QAAA,EAEO,CAACxD,SAAS,GAEPpB,IAAA,CAACP,KAAK;YACF0F,MAAM,EAAEC,OAAO,8BAA+B;YAC9CC,UAAU,EAAC,SAAS;YACpBR,KAAK,EAAE;cAACS,KAAK,EAAC,EAAE;cAAC3B,MAAM,EAAC;YAAE;UAAE,EAC9B,GAEFvC;QAAS,EAEF;MAAA;IAGpB,EAEJ,GAGV,CAAAmC,WAAW,oBAAXA,WAAW,CAAE2C,MAAM,IAAG,CAAC,GAGpBlG,IAAA,CAACN,gBAAgB;MAACmF,KAAK,EAAE,CAACC,MAAM,CAACC,OAAO,EAACvE,SAAS,CAAE;MAACyF,OAAO,EAAE,SAAAA,QAAA,EAAM;QAAE,IAAG,CAAC9C,QAAQ,EAAC;UAAEiB,SAAS,EAAE;QAAC,CAAC,MAAI;UAAEM,OAAO,EAAE;QAAC;MAAE,CAAE;MAAAE,QAAA,EAClH1E,KAAA,CAACZ,IAAI;QAAAsF,QAAA,GACD5E,IAAA,CAACT,IAAI;UAACsF,KAAK,EAAE,CAAC;YAACsB,UAAU,EAAC,KAAK;YAAC9F,UAAU,EAAVA;UAAU,CAAC,EAAC4B,WAAW,CAAE;UAAA2C,QAAA,EAAGjD;QAAK,EAAS,EAC1E3B,IAAA,CAACV,IAAI;UAACuF,KAAK,EAAE;YAACG,aAAa,EAAC,KAAK;YAACoB,YAAY,EAAC,CAAC;YAACC,QAAQ,EAAC;UAAM,CAAE;UAAAzB,QAAA,EAE1DrB,WAAW,oBAAXA,WAAW,CAAE+C,GAAG,CAAC,UAACV,IAAI,EAACW,KAAK,EAAK;YAC7B,OACIvG,IAAA,CAACV,IAAI;cAAauF,KAAK,EAAE,CAAC;gBAAC2B,eAAe,EAAC,MAAM;gBAACC,iBAAiB,EAAC,EAAE;gBAACC,eAAe,EAAC,CAAC;gBAACC,YAAY,EAAC,EAAE;gBAACpB,WAAW,EAAC,EAAE;gBAACqB,SAAS,EAAC;cAAE,CAAC,EAAE1E,WAAW,CAAE;cAAA0C,QAAA,EAChJ5E,IAAA,CAACT,IAAI;gBAACsF,KAAK,EAAE,CAAC;kBAACgC,KAAK,EAAC,OAAO;kBAACC,QAAQ,EAAC,EAAE;kBAACzG,UAAU,EAAVA;gBAAU,CAAC,EAAE8B,eAAe,CAAE;gBAAAyC,QAAA,EAAEgB;cAAI;YAAQ,GAD9EW,KAAK,CAET;UAEf,CAAC;QAAC,EAEH;MAAA;IACJ,EACQ,GAEnBrG,KAAA,CAACR,gBAAgB;MAACmF,KAAK,EAAE,CAACC,MAAM,CAACC,OAAO,EAACvE,SAAS,CAAE;MAACyF,OAAO,EAAE,SAAAA,QAAA,EAAM;QAAE,IAAG,CAAC9C,QAAQ,EAAC;UAAEiB,SAAS,EAAE;QAAC,CAAC,MAAI;UAAEM,OAAO,EAAE;QAAC;MAAE,CAAE;MAAAE,QAAA,GAClH5E,IAAA,CAACT,IAAI;QAACsF,KAAK,EAAE,CAAC;UAACxE,UAAU,EAAVA;QAAU,CAAC,EAACI,WAAW,CAAE;QAAAmE,QAAA,EAAIrB,WAAW,IAAI,EAAE,GAAKhD,WAAW,GAAIA,WAAW,GAAG,eAAe,GAAGgD;MAAW,EAAU,EAEjI,CAACrC,SAAS,GAEPlB,IAAA,CAACP,KAAK;QACF0F,MAAM,EAAEC,OAAO,gCAAiC;QAChDC,UAAU,EAAC,SAAS;QACpBR,KAAK,EAAE;UAACS,KAAK,EAAC,EAAE;UAAC3B,MAAM,EAAC;QAAE;MAAE,EAC9B,GAEFzC,SAAS;IAAA,EAGF,EAItBiC,QAAQ,GAELnD,IAAA,CAACJ,QAAQ,CAACN,IAAI;MAACuF,KAAK,EAAE,CAAC;QAAChE,SAAS,EAACgD;MAAa,CAAC,EAACiB,MAAM,CAAC3B,QAAQ,EAAEzC,cAAc,CAAE;MAAAkE,QAAA,EAC9E1E,KAAA,CAACZ,IAAI;QAACuF,KAAK,EAAE,CAAC;UAAChE,SAAS,EAAC8C;QAAM,CAAC,CAAE;QAAAiB,QAAA,GAC9B5E,IAAA,CAACL,UAAU;UAACoH,qBAAqB,EAAE;YAACL,eAAe,EAAC;UAAE,CAAE;UAACM,mBAAmB,EAAE,IAAK;UAAApC,QAAA,EAG1EV,YAAY,CAACgC,MAAM,IAAK,CAAC,GAE1BhC,YAAY,CAACoC,GAAG,CAAC,UAACV,IAAY,EAACW,KAAa,EAAK;YAAA,IAAAU,KAAA,EAAAC,SAAA,EAAAC,WAAA,EAAAC,cAAA;YAC7C,IAAIC,GAAG,IAAAJ,KAAA,IAAAC,SAAA,GAAGtB,IAAI,CAACyB,GAAG,YAAAH,SAAA,GAAItB,IAAI,CAACG,KAAK,YAAAkB,KAAA,GAAIrB,IAAI;YACxC,IAAIG,KAAK,IAAAoB,WAAA,GAAGvB,IAAI,CAACG,KAAK,YAAAoB,WAAA,GAAIvB,IAAI;YAC9B,IAAI0B,QAAQ,IAAAF,cAAA,GAAGxB,IAAI,CAAC0B,QAAQ,YAAAF,cAAA,GAAI,KAAK;YACrC,IAAGE,QAAQ,EAAC;cACR,OACIpH,KAAA,CAACR,gBAAgB;gBAACmF,KAAK,EAAE,CAACC,MAAM,CAACyC,cAAc,EAACzF,kBAAkB,CAAE;gBAAA8C,QAAA,GAChE5E,IAAA,CAACV,IAAI;kBAACuF,KAAK,EAAE,CAAC;oBAACS,KAAK,EAAC,EAAE;oBAAC3B,MAAM,EAAC,EAAE;oBAAC4B,WAAW,EAAC,EAAE;oBAACoB,YAAY,EAAC,CAAC;oBAACa,cAAc,EAAC,QAAQ;oBAACvC,UAAU,EAAC,QAAQ;oBAACuB,eAAe,EAAC;kBAAS,CAAC,EAACxE,sBAAsB,CAAE;kBAAA4C,QAAA,EAGtJrB,WAAW,YAAXA,WAAW,CAAEkE,QAAQ,CAAC1B,KAAK,CAAC,GAGzB/F,IAAA,CAACP,KAAK;oBAEF0F,MAAM,EAAEC,OAAO,8BAA+B;oBAC9CC,UAAU,EAAC,SAAS;oBACpBR,KAAK,EAAE,CAAC;sBAACS,KAAK,EAAC,CAAC;sBAAC3B,MAAM,EAAC,CAAC;sBAAC+D,WAAW,EAAC;oBAAC,CAAC;kBAAE,GAHrCnB,KAAK,CAIZ,GAGN;gBAAI,EAGL,EACPvG,IAAA,CAACT,IAAI;kBAACsF,KAAK,EAAE,CAAC;oBAACxE,UAAU,EAAVA,UAAU;oBAACwG,KAAK,EAAC;kBAAS,CAAC,EAAC9E,kBAAkB,CAAE;kBAAA6C,QAAA,EAAEmB;gBAAK,EAAQ;cAAA,GAnBRQ,KAAK,CAoB5D;YAE3B,CAAC,MAAI;cACD,OACIrG,KAAA,CAACR,gBAAgB;gBAACmF,KAAK,EAAE,CAACC,MAAM,CAAC6C,MAAM,EAAChH,kBAAkB,CAAE;gBAAasF,OAAO,EAAG,SAAAA,QAAA,EAAM;kBAGrF,IAAI2B,QAAQ,GAAGrE,WAAW,oBAAXA,WAAW,CAAEsE,OAAO,CAAC9B,KAAK,CAAC;kBAK1C,IAAG6B,QAAQ,IAAI,CAAC,CAAC,IAAKA,QAAQ,IAAIE,SAAS,EAAC;oBAExC,IAAIC,EAAE,GAAAC,kBAAA,CAAOzE,WAAW,CAAC;oBACzBwE,EAAE,CAACE,MAAM,CAACL,QAAQ,EAAC,CAAC,CAAC;oBACrBpE,cAAc,CAACuE,EAAE,CAAC;oBAGlBzH,WAAW,CAAC,UAACmF,GAAQ,EAAK;sBACtB,IAAIyC,IAAI,GAAAF,kBAAA,CAAOvC,GAAG,CAAC;sBACnByC,IAAI,CAACD,MAAM,CAACL,QAAQ,EAAC,CAAC,CAAC;sBACvB,OAAOM,IAAI;oBACf,CAAC,CAAC;kBAGN,CAAC,MAAI;oBACD,IAAG5F,IAAI,KAAK,OAAO,EAAC;sBAChBhC,WAAW,CAAC,UAACmF,GAAQ,EAAK;wBACtB,IAAIyC,IAAI,GAAAF,kBAAA,CAAO,IAAIG,GAAG,IAAAC,MAAA,CAAAJ,kBAAA,CAAKvC,GAAG,IAACM,KAAK,GAAE,CAAC;wBACvC,OAAOmC,IAAI;sBACf,CAAC,CAAC;oBACN,CAAC,MAAI;sBACD5H,WAAW,CAAC,UAACmF,GAAQ,EAAK;wBACtB,IAAIyC,IAAI,GAAAF,kBAAA,CAAO,IAAIG,GAAG,IAAAC,MAAA,CAAAJ,kBAAA,CAAKvC,GAAG,IAAC4B,GAAG,GAAE,CAAC;wBACrC,OAAOa,IAAI;sBACf,CAAC,CAAC;oBACN;oBAEA1E,cAAc,CAAC,UAACiC,GAAQ,EAAK;sBACzB,IAAIyC,IAAI,GAAAF,kBAAA,CAAO,IAAIG,GAAG,IAAAC,MAAA,CAAAJ,kBAAA,CAAKvC,GAAG,IAACM,KAAK,GAAE,CAAC;sBACvC,OAAOmC,IAAI;oBACf,CAAC,CAAC;kBAIN;gBAIJ,CAAE;gBAAAtD,QAAA,GACE5E,IAAA,CAACV,IAAI;kBAACuF,KAAK,EAAE,CAAC;oBAACS,KAAK,EAAC,EAAE;oBAAC3B,MAAM,EAAC,EAAE;oBAAC0E,WAAW,EAAC,CAAC;oBAAC9C,WAAW,EAAC,EAAE;oBAAC+C,WAAW,EAAC,MAAM;oBAAC3B,YAAY,EAAC,CAAC;oBAACa,cAAc,EAAC,QAAQ;oBAACvC,UAAU,EAAC;kBAAQ,CAAC,EAAC7C,cAAc,CAAE;kBAAAwC,QAAA,EAGrJrB,WAAW,YAAXA,WAAW,CAAEkE,QAAQ,CAAC1B,KAAK,CAAC,GAGzB/F,IAAA,CAACP,KAAK;oBAEF0F,MAAM,EAAEC,OAAO,8BAA+B;oBAC9CC,UAAU,EAAC,SAAS;oBACpBR,KAAK,EAAE;sBAACS,KAAK,EAAC,CAAC;sBAAC3B,MAAM,EAAC,CAAC;sBAAC+D,WAAW,EAAC;oBAAC;kBAAE,GAHnCnB,KAAK,CAIZ,GAGN;gBAAI,EAOL,EACPvG,IAAA,CAACT,IAAI;kBAACsF,KAAK,EAAE,CAAC;oBAACxE,UAAU,EAAVA;kBAAU,CAAC,EAACO,kBAAkB,CAAE;kBAAAgE,QAAA,EAAEmB;gBAAK,EAAQ;cAAA,GArEAQ,KAAK,CAsEpD;YAE3B;UAEJ,CAAC,CAAC,GAEFvG,IAAA,CAACN,gBAAgB;YAACmF,KAAK,EAAE,CAACC,MAAM,CAAC6C,MAAM,EAAChH,kBAAkB,CAAE;YAACsF,OAAO,EAAG,SAAAA,QAAA,EAAM;cACzE3F,WAAW,CAACwH,SAAS,CAAC;cACtBtE,cAAc,CAAC,EAAE,CAAC;cAClBkB,OAAO,EAAE;cACT6D,UAAU,CAAC;gBAAA,OAAMpE,eAAe,CAACrD,IAAI,CAAC;cAAA,GAAE,GAAG,CAAC;YAChD,CAAE;YAAA8D,QAAA,EACE5E,IAAA,CAACT,IAAI;cAACsF,KAAK,EAAEjE,kBAAmB;cAAAgE,QAAA,EAAE/C;YAAY;UAAQ;QACvC,EAKd,EAGJ,CAAA0B,WAAW,oBAAXA,WAAW,CAAE2C,MAAM,IAAG,CAAC,GAEpBhG,KAAA,CAACJ,SAAS;UAAA8E,QAAA,GACN1E,KAAA,CAACZ,IAAI;YAACuF,KAAK,EAAE;cAACG,aAAa,EAAC,KAAK;cAAEwC,cAAc,EAAC,eAAe;cAACvC,UAAU,EAAC,QAAQ;cAACyC,WAAW,EAAC;YAAE,CAAE;YAAA9C,QAAA,GAClG5E,IAAA,CAACT,IAAI;cAACsF,KAAK,EAAE;gBAACU,WAAW,EAAC,EAAE;gBAACY,UAAU,EAAC,KAAK;gBAAC9F,UAAU,EAAVA;cAAU,CAAE;cAAAuE,QAAA,EAAC;YAAQ,EAAO,EAC1E5E,IAAA,CAACV,IAAI;cAACuF,KAAK,EAAE;gBAAClB,MAAM,EAAE,CAAC;gBAAEuB,IAAI,EAAE,CAAC;gBAAEsB,eAAe,EAAE;cAAM;YAAE,EAAG;UAAA,EAC3D,EACPxG,IAAA,CAACV,IAAI;YAACuF,KAAK,EAAE;cAACG,aAAa,EAAC,KAAK;cAACyB,iBAAiB,EAAC,EAAE;cAACL,YAAY,EAAC,EAAE;cAACC,QAAQ,EAAC;YAAM,CAAE;YAAAzB,QAAA,EAGhFrB,WAAW,oBAAXA,WAAW,CAAE+C,GAAG,CAAC,UAACV,IAAI,EAACW,KAAK,EAAK;cAC7B,OACIvG,IAAA,CAACV,IAAI;gBAAauF,KAAK,EAAE,CAAC;kBAAC2B,eAAe,EAAC,MAAM;kBAACC,iBAAiB,EAAC,EAAE;kBAACC,eAAe,EAAC,CAAC;kBAACC,YAAY,EAAC,EAAE;kBAACpB,WAAW,EAAC,EAAE;kBAACqB,SAAS,EAAC;gBAAE,CAAC,EAAC1E,WAAW,CAAE;gBAAA0C,QAAA,EAC/I5E,IAAA,CAACT,IAAI;kBAACsF,KAAK,EAAE,CAAC;oBAACgC,KAAK,EAAC,OAAO;oBAACC,QAAQ,EAAC,EAAE;oBAACzG,UAAU,EAAVA;kBAAU,CAAC,EAAC8B,eAAe,CAAE;kBAAAyC,QAAA,EAAEgB;gBAAI;cAAQ,GAD7EW,KAAK,CAET;YAEf,CAAC;UAAC,EAGH;QAAA,EACC,GAEhB,IAAI;MAAA;IAKT,EAEK,GAEpB,IAAI;EAAA,EAIL;AAEf,CAAC;AAED,eAAepG,kBAAkB;AAEjC,IAAM2E,MAAM,GAAGtF,UAAU,CAACgJ,MAAM,CAAC;EAC7BzD,OAAO,EAAC;IAAEsD,WAAW,EAAC,CAAC;IAAC1B,YAAY,EAAC,EAAE;IAAC2B,WAAW,EAAC,MAAM;IAAC7B,iBAAiB,EAAC,EAAE;IAACC,eAAe,EAAC,EAAE;IAAC1B,aAAa,EAAC,KAAK;IAACwC,cAAc,EAAC,eAAe;IAACpB,YAAY,EAAC;EAAG,CAAC;EACvKjD,QAAQ,EAAC;IAAEkF,WAAW,EAAC,CAAC;IAAC1B,YAAY,EAAC,EAAE;IAAC2B,WAAW,EAAC,MAAM;IAACG,QAAQ,EAAC;EAAQ,CAAC;EAC9Ed,MAAM,EAAC;IAAElB,iBAAiB,EAAC,EAAE;IAACC,eAAe,EAAC,CAAC;IAAC1B,aAAa,EAAC,KAAK;IAACC,UAAU,EAAC;EAAQ,CAAC;EACxFsC,cAAc,EAAC;IAAEd,iBAAiB,EAAC,EAAE;IAACC,eAAe,EAAC,CAAC;IAAC1B,aAAa,EAAC,KAAK;IAACC,UAAU,EAAC,QAAQ;IAAEuB,eAAe,EAAC;EAAY;AAEjI,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}